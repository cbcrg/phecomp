/*
#################################################################################
### Jose Espinosa-Carrasco. CB/CSN-CRG. April 2015                            ### 
#################################################################################
### Code : 23.01                                                              ###
### Position from tac files                                                   ### 
### ./nextflow tac2activity.nxf --tac_files '*.tac'                           ###
#################################################################################
*/

params.tac_files = "/phecomp/data/CRG/20120502_FDF_CRG/20120502_FDF_CRG/test/*.tac"

tac_files_path = "$HOME/${params.tac_files}"

println "path: $tac_files_path"

tac_files = Channel.fromPath(tac_files_path)

path_tac2pos = "$HOME/git/phecomp/lib/c/"

correspondence_f_path = "$HOME/git/pergola/test/position2pergola.txt"
correspondence_f = file(correspondence_f_path)

// Correspondence file for bedGraph files
correspondence_f_bG_path = "$HOME/git/pergola/test/bedGraph2pergola.txt"
correspondence_f_bG = file(correspondence_f_bG_path)


/* 
 * Creating results folder
 */
dump_dir = file("$HOME/phecomp/processedData/201205_FDF_CRG/tac2activity/")

dump_dir.with {
     if( !empty() ) { deleteDir() }
     mkdirs()
     println "Created: $dump_dir"
}

/*
 * Extract postion from tac files
 */
process extractPosition {
 
 input:
 file tac from tac_files
 
 // I duplicate the output, one for writing file and one for continue pipe
 output:
// set '*.pos' into act_file
 file '*.pos' into pos_files1
 file '*.pos' into pos_files2
 
 script:
  println "Input name is $tac.name"
   
 """
 ${path_tac2pos}new_tac2pos -file $tac -action position > ${tac}.pos 
 """

}

/*
Another way of duplicating the channels
pos_files1 = Channel.create() 
pos_files2 = Channel.create() 
 */

/*
 * Writing position file
 */ 

pos_files1
    .subscribe {
        println "Copying pos file: $it"
        it.copyTo( dump_dir.resolve ( it.name ) )
  }

  
/*
 * Join position files
 * Puedo hacer los archivos uno a uno y luego unirlos dejando siempre la coordinadas como las originales
 * Se puede unir despues y hacer luego la coordinadas relativas???
 * Puedo leer directamente el bed o el bed graph no deja de ser un archivo csv
 */
pos_files2Flat = pos_files2.flatten().map { single_pos_file ->   
   def name = single_pos_file.name
   def content = single_pos_file
   [ name,  content ]
}

process joinPosCh {
    
    input: 
    set val (f_pos_name), file ('f_pos') from pos_files2Flat
    
    output:
    set val(f_pos_name), file('*.bedGraph') into bedGraph
    set val(f_pos_name), file('*.bedGraph') into bedGraph2

    // Command example
    //pergola_rules.py -i "/Users/jespinosa/phecomp/processedData/201205_FDF_CRG/tac2activity/20120502_FDF_CRG_c6.tac.pos" -o "/Users/jespinosa/git/pergola/test/position2pergola.txt" -fs ";" -n -nt

    """ 
    pergola_rules.py -i $f_pos -o $correspondence_f -fs ";" -n -f bedGraph -nt
    """
}

bedGraph2 
    .subscribe { pos_file, bedGraph_files ->   
        for ( it in bedGraph_files ) {
            it.copyTo( dump_dir.resolve ( "${pos_file}${it.name}" ) )
            }  
    }
    
bedGraph_tr = bedGraph.map {pos_file, bedGraph_files ->
        bedGraph_files .collect {
            def pattern = it.name =~/^tr_(\d+).*$/
            def track = pattern[0][1]

            [ pos_file, track,  it ]
        }
    }
    .flatMap()
//    .println()
 
bG_by_track = bedGraph_tr    
    .collectFile { pos, track, file -> 
       [ "bedGraph_$track", file ]
    }
   .flatMap() 
   .map { file -> tuple( file, file.baseName.tokenize('_')[1]) }
//   .println() 


process bG_to_relative_coord {       

    input:
    set file ('bedGraph_f'), val(tr) from bG_by_track
    
    output:
    set file ('*.bedGraph'), val(tr) into bG_rel_coord
    
    """ 
    pergola_rules.py -i $bedGraph_f -o $correspondence_f_bG -f bedGraph -nh -s 'chrm' 'start' 'end' 'value' -e
    """ 
    
}
       
bG_rel_coord
    .subscribe  {  
        println "Copying %%%%%%%%%%%%%: ${it[1]}_relCoord.bedGraph"
        it[0].copyTo( dump_dir.resolve ( "tr_${it[1]}_relCoord.bedGraph" ) )
    }   